import requestsimport base64from datetime import datetimefrom requests.auth import HTTPBasicAuthimport loggingimport oslogger = logging.getLogger(__name__)class MpesaPayment:    def __init__(self):        self.consumer_key = os.getenv("MPESA_CONSUMER_KEY")        self.consumer_secret = os.getenv("MPESA_CONSUMER_SECRET")        self.shortcode = os.getenv("MPESA_SHORTCODE")        self.passkey = os.getenv("MPESA_PASSKEY")        self.base_url = "https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials"        self.stk_url = "https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest"    def get_access_token(self):        try:            response = requests.get(                self.base_url,                auth=HTTPBasicAuth(self.consumer_key, self.consumer_secret)            )            response.raise_for_status()            return response.json().get("access_token")        except requests.RequestException as e:            logger.error(f"Error fetching access token: {e}. Please check your credentials and try again.")            return None    def generate_password(self):        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")        data_to_encode = f"{self.shortcode}{self.passkey}{timestamp}"        return base64.b64encode(data_to_encode.encode()).decode(), timestamp    def initiate_payment(self, phone_number, amount, callback_url):        access_token = self.get_access_token()        if not access_token:            return {"error": "Failed to retrieve access token"}        password, timestamp = self.generate_password()        headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}        payload = {            "BusinessShortCode": self.shortcode,            "Password": password,            "Timestamp": timestamp,            "TransactionType": "CustomerPayBillOnline",            "Amount": amount,            "PartyA": phone_number,            "PartyB": self.shortcode,            "PhoneNumber": phone_number,            "CallBackURL": callback_url,            "AccountReference": "ADHS",            "TransactionDesc": "Driver_hire"        }        try:            response = requests.post(self.stk_url, json=payload, headers=headers)            response.raise_for_status()            return response.json()        except requests.RequestException as e:            logger.error(f"Request failed: {e}. Please ensure the payment service is available.")            return {"error": f"Request failed: {e}"}def process_payment(user, driver, amount, callback_url):    mpesa = MpesaPayment()    response = mpesa.initiate_payment(user.phone_number, amount, callback_url)    if response.get("status") == "success":        driver.available = False        driver.save()        return {"status": "success", "message": "Payment successful. Driver hired."}    else:        return {"status": "error", "message": "Payment failed. Try again."}